<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.hype.mapper.MemberMapper">
	<select id="getMList" resultType="org.hype.domain.signInVO">
	    SELECT 
            userNo, 
            userId, 
            userEmail,
            lastLoginDate,
            enabled,
            auth
        FROM sign_in_info_tbl
    </select>
    
    <select id="getListBySearchMs" parameterType="String" resultType="org.hype.domain.signInVO">
    	SELECT * FROM sign_in_info_tbl WHERE userId LIKE '%' || #{searchMs} || '%'
	</select>
	
	<select id="getMembersById" parameterType="String" resultType="org.hype.domain.signInVO">
   		SELECT userNo, userId, userEmail, lastLoginDate, enabled, auth FROM sign_in_info_tbl WHERE userNo = #{userNo}
	</select>
	
	<!--윤씨 통합 부분 -->
	<!--auth 는 나중에 추가할 예정 -->
	<!-- <resultMap type="org.hype.domain.signInVO" id="memberMap">
		<result property="userNo" column="USERNO" />
		<result property="userId" column="USERID" />
		<result property="userPw" column="USERPW" />
		<result property="userEmail" column="USEREMAIL" />
		<result property="userName" column="USERNAME" />
		<result property="userNumber" column="USERNUMBER" />
		<result property="userInterest" column="USERINTEREST" />
		<result property="regDate" column="REGDATE" />
		<result property="lastLoginDate" column="LASTLOGINDATE" />
		<result property="enabled" column="ENABLED" />
		<result property="snsToken" column="SNSTOKEN" />
		<result property="snsType" column="SNSTYPE" />
	</resultMap>
	 -->


	<!--회원가입 -->
	<insert id="joinMember" parameterType="org.hype.domain.signInVO">
	<selectKey keyProperty="userNo" resultType="int" order="BEFORE">
        SELECT userNo_seq.NEXTVAL FROM dual
    </selectKey>
		
		insert into
		sign_in_info_tbl (userNo,userId,userPw,userEmail,userName, userNumber,
		 regDate, enabled, auth)
		values (#{userNo}, #{userId}, #{userPw},
		#{userEmail}, #{userName}, #{userNumber}
		 ,sysdate, 1,1)
	</insert>
	

	

	<!-- 회원의 관심사를 개별적으로 삽입 -->
	<insert id="insertInterest" parameterType="org.hype.domain.mCatVO">
	    INSERT INTO member_cat_tbl (
	        userNo,
	        healthBeauty,
	        game,
	        culture,
	        shopping,
	        supply,
	        kids,
	        design,
	        foods,
	        interior,
	        policy,
	        character,
	        experience,
	        collaboration,
	        entertainment
	    ) VALUES (
	        #{userNo},
	        #{healthBeauty},
	        #{game},
	        #{culture},
	        #{shopping},
	        #{supply},
	        #{kids},
	        #{design},
	        #{foods},
	        #{interior},
	        #{policy},
	        #{character},
	        #{experience},
	        #{collaboration},
	        #{entertainment}
	    )
	</insert> 




	<!--로그인 -->
	<select id="loginMember" parameterType="org.hype.domain.signInVO" resultType="org.hype.domain.signInVO">
		select *
		from sign_in_info_tbl
		where userId = #{userId}
		and userPw = #{userPw}
	</select>

	<!--아이디 중복 확인  -->
	<select id="checkDuplicateId" resultType="int" parameterType="String">
    	SELECT COUNT(*) FROM sign_in_info_tbl WHERE userId = #{userId}
	</select>


	<!--아이디 찾기 버튼 -->
		<!--아이디 조회 , 테이블 행 수로 조회 -->
		<select id="selectId" parameterType="org.hype.domain.signInVO" resultType="int">
			select
			count(*) from sign_in_info_tbl where userId = #{userId};
		</select>
	
		<!--이메일로 회원 정보 조회 -->
		<select id="selectEmail" parameterType="string"
			resultType="org.hype.domain.signInVO">
			select * from sign_in_info_tbl where userEmail =
			#{userEmail};
		</select>



	<!--비밀번호 찾기로 비밀번호 변경 -->

	<update id="updatePw" parameterType="string">
		update sign_in_info_tbl 
		set userPw = #{userPw} where userEmail = {userEmail};
	</update>


	<!--비밀번호 변경으로 비밀번호 변경 -->

		<!--기존 비밀번호 조회 -->
		<select id="oldPw" parameterType="org.hype.domain.signInVO"
			resultType="int">
			select count(*) from sign_in_info_tbl where userNo = #{userNo} and userPw =
			#{userPw};
		</select>
	
	
		<!--신규 비밀번호 입력 -->
		<update id="newPw" parameterType="org.hype.domain.signInVO">
			update sign_in_info_tbl set
			userPw = #{newPw} where userNo = #{userNo} and userPw = #{userPw};
		</update>


	<!--이메일 변경 -->

		<!--기존 이메일 조회 -->
		<select id="oldEmail" parameterType="org.hype.domain.signInVO"
			resultType="int">
			select count(*) from sign_in_info_tbl where userNo = #{userNo} and userEmail
			= #{userEmail};
		</select>
	
		<!--신규 이메일 입력 -->
		<update id="newEmail" parameterType="org.hype.domain.signInVO">
			update sign_in_info_tbl set
			userEmail = #{newEmail} where userNo = #{userNo} and userEmail =
			#{userEmail};
		</update>


	<!--전화번호 변경 -->
	
		<!--기존 전화번호 조회 -->
		<select id="oldPhoneNum"
			parameterType="org.hype.domain.signInVO" resultType="int">
			select count(*) from sign_in_info_tbl where userNo = #{userNo} and
			userNumber = #{userNumber};
		</select>
	
		<!--신규 전화번호 입력 -->
		<update id="newPhoneNum"
			parameterType="org.hype.domain.signInVO">
			update sign_in_info_tbl set userNumber =
			#{newUserNumber} where userNo = #{userNo} and userNumber =
			#{userNumber};
		</update>


	<!--좋아요 한 팝업스토어 -->
	<select id="likeList" resultType="org.hype.domain.pImgVO">
		select pop_img_tbl.*,
		like_list_tbl.userNo
		from pop_img_tbl
		left join pop_img_tbl on
		like_list_tbl.psNo = pop_img_tbl.psNo;
		where like_list_table.userNo =
		#{userNo}
	</select>

	<!--좋아요 한 굿즈 스토어 -->
	<select id="glikeList" resultType="org.hype.domain.gImgVO">
		select goods_img_tbl.*
		from
		pop_img_tbl
		join goods_like_list_table
		on goods_img_tbl.gno = goods_like_list_table.gno
		where goods_like_list_table.userNo = #{userNo}
	</select>


	<!--굿즈 댓글 목록 리스트 -->
	<select id="gReplyList" resultType="org.hype.domain.gReplyVO">
		select
		goods_reply_table.gComment,
		goods_reply_table.gRegDate,
		goods_info_tbl.gName
		from goods_reply_table
		join goods_info_tbl
		on goods_reply_table.gno = goods_info_tbl.gno
		where
		goods_reply_table.userNo = #{userNo}
	</select>

	<!--팝업스토어 댓글 목록 리스트 -->
	<select id="pReplyList" resultType="org.hype.domain.psReplyVO">
		select
		pop_reply_tbl.psName,
		pop_reply_tbl.psComment,
		pop_main_tbl.psRegDate
		from pop_reply_tbl
		join pop_main_tbl
		on pop_reply_tbl.psNo = pop_main_tbl.psNo
		where
		pop_reply_tbl.userNo = #{userNo}
	</select>



	<!--장바구니 리스트 출력 쿼리 -->
	<select id="cartList" resultType="org.hype.domain.cartVO">
		select cart_tbl.*,
		goods_info_tbl.gNo,
		goods_info_tbl.psNo,
		goods_info_tbl.gName,
		goods_info_tbl.gPrice,
		goods_info_tbl.gImg,
		goods_img_tbl.*
		from cart_tbl
		join goods_info_tbl on cart_tbl.gno = goods_info_tbl.gno
		join goods_img_tbl on goods_img_tbl.gno = goods_info_tbl.gno
		where
		cart_tbl.userNo = #{userNo}
	</select>


	<!--결제 전 배송 정보에서 회원 정보 조회 -->
	<select id="deliveryInfo" resultType="org.hype.domain.signInVO">
		SELECT
		sign_in_info_tbl.userName,
		sign_in_info_tbl.userEmail,
		sign_in_info_tbl.userNumber,
		cart_tbl.cPrice
		FROM
		sign_in_info_tbl
		JOIN
		cart_tbl ON sign_in_info_tbl.userNo = cart_tbl.userNo
	</select>



	<!--구매 내역 삽입 -->
	<insert id="insertPaymentList"
		parameterType="org.hype.domain.payVO">
		insert into pay_list_tbl ( gNo, userNo, gBuyDate, gSituation)
		VALUES (#{gNo},#{userNo}, sysdate, '구매완료')
	</insert>



	<!--구매 상품 리스트 출력 (구매 날짜 기준 정렬) -->
	<select id="selectPaymentList"
		resultType="org.hype.domain.payVO">
		select pay_list_tbl.key,
		goods_info_tbl.gName,
		pay_list_tbl.gAmount,
		goods_info_tbl.gPrice,
		pay_list_tbl.gBuyDate,
		pay_list_tbl.gSituation
		from pay_list_tbl
		join goods_info_tbl
		on pay_list_tbl.gno = goods_info_tbl.gno
		order by
		pay_list_tbl.gBuyDate DESC;
	</select>


	<!--회원 삭제(나중에 다시 봐야 됨) -->
	<delete id="deleteUser">
		DELETE FROM user_interest_tbl WHERE userNo = #{userNo};
		DELETE FROM cart_tbl WHERE userNo = #{userNo};
		DELETE FROM pay_list_tbl WHERE userNo = #{userNo};
		DELETE FROM delivery_tbl WHERE userNo = #{userNo};
		DELETE FROM sign_in_info_tbl WHERE userNo = #{userNo};
	</delete>





	
	
</mapper>